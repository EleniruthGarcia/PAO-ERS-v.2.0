generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  passwordHash  String
  userAuthToken String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  role          String    @default("lawyer")
  lawyer        Lawyer[]
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String
  district  String
  region    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  lawyer    Lawyer[]
}

model Client {
  id                      Int       @id @default(autoincrement())
  firstName               String
  middleName              String?
  lastName                String
  nameSuffix              String?
  age                     Int
  sex                     String
  address                 String
  email                   String?
  contactNumber           String?
  civilStatus             String?
  religion                String?
  citizenship             String?
  educationalAttainment   String?
  language                String?
  individualMonthlyIncome Decimal?
  detained                Boolean?
  detainedAt              String?
  detainedSince           DateTime?
  spouseName              String?
  spouseAddress           String?
  spouseContactNumber     String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime?
  request                 Request[]
}

model Lawyer {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  branch        Branch?   @relation(fields: [branchId], references: [id])
  branchId      Int?
  title         String
  firstName     String
  middleName    String?
  lastName      String
  nameSuffix    String?
  age           Int
  sex           String
  address       String
  email         String?
  contactNumber String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  request       Request[]
}

model Request {
  id          Int       @id @default(autoincrement())
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    Int
  lawyer      Lawyer    @relation(fields: [lawyerId], references: [id])
  lawyerId    Int
  requestType String
  requestDate DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  case        Case[]
}

model Case {
  id                 Int       @id @default(autoincrement())
  request            Request   @relation(fields: [requestId], references: [id])
  requestId          Int
  title              String
  court              String
  nature             String
  status             String
  causeOfAction      String
  lastActionTaken    String
  lastActionDate     DateTime
  causeOfTermination String
  dateOfTermination  DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
}
