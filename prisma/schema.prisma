generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username       String @unique
  hashedPassword String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lawyer   Lawyer[]
  sessions Session[]
}

model Session {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  expiresAt DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Branch {
  id String @id

  name     String
  district String
  region   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lawyer Lawyer[]
}

model Client {
  id String @id

  firstName               String
  middleName              String?
  lastName                String
  nameSuffix              String?
  age                     Int
  sex                     String
  address                 String
  email                   String?
  contactNumber           String?
  civilStatus             String?
  religion                String?
  citizenship             String?
  educationalAttainment   String?
  language                String?
  individualMonthlyIncome Float?
  detained                Boolean?
  detainedAt              String?
  detainedSince           DateTime?
  spouseName              String?
  spouseAddress           String?
  spouseContactNumber     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  request        Request[]
  classification Classification[]
}

model Classification {
  id String @id

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  type String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Lawyer {
  id String @id

  user   User   @relation(fields: [userId], references: [id])
  userId String

  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId String?

  title         String
  firstName     String
  middleName    String?
  lastName      String
  nameSuffix    String?
  age           Int
  sex           String
  address       String
  email         String?
  contactNumber String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  request Request[]
}

model Request {
  id String @id

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  lawyer   Lawyer @relation(fields: [lawyerId], references: [id])
  lawyerId String

  requestType String
  requestDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  case Case[]
}

model Case {
  id String @id

  request   Request @relation(fields: [requestId], references: [id])
  requestId String

  title              String?
  docketNumber       String?
  court              String?
  status             String
  nature             String
  causeOfAction      String
  lastActionTaken    String
  lastActionDate     DateTime
  causeOfTermination String
  dateOfTermination  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
